#!/usr/bin/env python3
import os
import textwrap

import yaml
import sys

from jinja2 import Template

from dialog import Dialog


def get_template_set_directories(base_dir):
    """
    Get only directories that are present under provided base directory
    """
    all_files = os.listdir(base_dir)

    # Filterout non-directories
    sub_directory_names = []
    for filename in all_files:
        abs_filename = os.path.join(base_dir, filename)
        if os.path.isdir(abs_filename):
            sub_directory_names.append(abs_filename)
    return sub_directory_names


def load_template_sets_yamls(base_dir):
    template_sub_dirs = get_template_set_directories(base_dir)

    # Ensure we have a valid 'config.yaml' in each found directory. Also do
    # some basic validations on what's found in the YAML and file structure.
    valid_template_sets = []

    for template_dir in template_sub_dirs:
        config_path = os.path.join(template_dir, "config.yaml")
        with open(config_path, "r") as config_yaml_file:
            config_object = yaml.load(config_yaml_file, yaml.Loader)
            valid_template_sets.append((template_dir, config_object))

    return valid_template_sets


def select_template_set_from_menu(dlg, template_sets_info_list):
    # Unpack info tuples
    menu_list = []
    for template_set in template_sets_info_list:
        base_dir, config_obj = template_set
        menu_list.append(
            (config_obj['short_name'], config_obj['short_description'], False)
        )

    selected_sets = dlg.checklist(
        "Select Template set to begin with",
        choices=menu_list,
        title="Select Template Set",
        width=70,
        list_height=5,
        height=12,
        backtitle="Chromers",
    )
    return selected_sets


def main():
    d = Dialog(dialog="dialog")

    TEMPLATE_SETS_DIR = "../template_sets"
    main_args = []  # Args that will go into generated scripts' main()
                    # signature

    templates_dir = os.path.abspath(os.path.join(os.getcwd(), TEMPLATE_SETS_DIR))

    template_sets_info = load_template_sets_yamls(templates_dir)

    selected_template = select_template_set_from_menu(d, template_sets_info)

    #
    # # Get list of client spec 'short_name' values using Dialog menu
    # status, selected_clients = client_select_menu(d, client_choices_menu)
    # if status != 'ok':
    #     print("\nAborted on client selection!\n")
    #     sys.exit(1)

    # wrapped_main_args = wrap_main_args(main_args)

    # output = script_template.render(
    #     switch_flags=switch_flags,
    #     main_args=main_args,
    #     wrapped_main_args=wrapped_main_args,
    #     instance_templates=instance_templates,
    #     prefix=entered_prefix,
    #     client_args_list=client_args_list,
    #     imports_list=imports_list,
    #     app_title=script_name,
    # )
    #
    # with open(f"output/{script_name}", "w") as output_script:
    #     output_script.write(output)


if __name__ == "__main__":
    main()
